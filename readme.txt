チームラボ　オンラインスキルアップ Node.js

STEP 2:最終課題　Todoリスト(フロントエンド+サーバーサイド)

#制作環境:
  言語:　HTML　CSS javascript(jQuery)　
  フレームワーク:express
  データベース:MongoDB
  文字コード: ファイルはUTF-8
  開発環境:atom
  動作確認:Google Chrome,Safari(input dateフォームの入力が異なる)

#仕様:
  基本仕様の説明↓

  画面構成*
  トップ画面   :Todoリスト一覧を表示、Todoリスト作成
  Todo詳細画面:Todoの表示、Todoの追加、Todoの状態変更
  検索画面    :Todoの検索

  Node.jsのフレームワークexpressを用いて、データベースMongoDBにデータを蓄えることでTodoリストを
  実現している。MongoDBがインストールされていて、Node.jsが動作できる環境のあるローカルPC上で動作することが可能。

  動作としては、Todoリストの作成からそれに紐ずくTodoの作成とそれのチェック機能がある。
  また、Todo名とリスト名に対して検索をかけることが可能。


#デザインコンセプト:
  このTodoアプリケーションのデザインは、STEP1の黒板のイメージとは違い、シンプルでわかりやすいものを心がけた。色は基本的に
  白、赤、青の三色でヘッダーの青とフォームの青などは強弱をつけた。期限などの気になる情報を赤で、入力時のエラーや
  入力されていない状態のメッセージには暗めの色を使って、情報がわかりやすく統一性があることを目指した。


#動作について
　基本的なエラーチェックの他、Todoのチェック状態など数値を見て、すべてが完了している時・Todoが登録されていない時などでメッセージや
　期限の表示を切り替えるようにした。

  また、HTMLタグのエスケープ処理はデータベースに入れるタイミングではなく、表示の直前で行い、search画面で影響が出る場合にも行っている。

  今回はユーザーが入力した文字がurlとして使われるタイミングがあるため、「 / 」などを入力された時に問題が起こる。
  そのため、hrefの指定にはencodeURIComponentを用いることでユーザーに影響なくURLのエスケープを行った。

#作成してみて
  今回このTodoリストアプリケーションを作成するにあたって、Node.jsとそのフレームワークであるexpressやデータベースのMongoDB
  を初めて使用した。サーバーサイドの知識がなく動作とプログラムの紐付けを理解するのに時間がかかったが、このアプリの作成を通じて
  GETアクセス、POSTアクセスなどの動作、読み込まずに画面の情報を動的に変えることができるAjaxについての理解が深まった。
  これまでjavascriptでwebサイトの動作を行ったり、見た目を変えてみたりといった体験からフロントエンドの知識はある程度あったが、
  サーバーサイドは学習のハードルが高いイメージがあり、自分で動かしてみるきっかけがなかったが、今回のSTEP2で、サーバーサイドの
  学習に意欲を持つことができた。また、コード規約に沿ってプログラムを書くのは初めてだったが、インデントやキャメルケースでの変数定義
  でコードを見やすく保つ意識を持つきっかけになった。ただ、現状CSSファイルの見た目が汚く整理の仕方がよくわかっていないので考えたい。


  追加したかった機能:(期間内には実装できなかったがこれから実装できそうな機能)
  ・Todo、リストの削除機能(全削除・個別・チェックのみ)
  ・リスト/Todo数が一目で見れる(プログレスバー等で可視化)
  ・優先度をつける(3段階ぐらいでつけてソートできる)

  STEP3に進むことができたら、これまでの技術の応用でオリジナルサイトを作ることができ、また初めて学ぶ技術に触れることができるので
  締め切りをしっかり見通したスケジュールを立てて開発を頑張りたいです。
